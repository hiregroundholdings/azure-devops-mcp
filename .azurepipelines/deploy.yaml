# Azure DevOps CD Pipeline for Azure DevOps MCP Server
# Deploy to Azure Container Apps
# This pipeline is triggered manually, by updates to the deployment pipeline or by completion of the build pipeline

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - .azurepipelines/deploy.yaml
      - .azure/**

resources:
  repositories:
  - repository: armtemplates
    type: git
    name: arm-templates

  pipelines:
  - pipeline: ci
    source: 'ado-mcp-ci'
    trigger:
      branches:
        include:
        - main

variables:
  - name: azureServiceConnection
    value: 'Hire Ground Enterprise'
    readonly: true

  - name: environmentName
    value: 'Production'
    readonly: true

  - name: subscriptionId
    value: '80188524-4199-4293-8e33-7ba33daa0f2a'
    readonly: true

  - name: location
    value: 'eastus2'
    readonly: true

  - name: azureDevOpsOrgName
    value: 'hireground'
    readonly: true

  - name: vmImageName
    value: 'ubuntu-latest'
    readonly: true

stages:
- stage: Deploy
  displayName: Deploy to Azure Container Apps
  variables:
    - name: resourceGroupName
      value: 'rg-devops'
      readonly: true

    - name: containerAppName
      value: 'ado-mcp-server-eus2'
      readonly: true
  jobs:
  - deployment: DeployToContainerApps
    displayName: Deploy to Azure Container Apps
    pool:
      vmImage: $(vmImageName)
    environment: 'Hire Ground DevOps'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: DownloadPipelineArtifact@2
            displayName: Download deployment metadata
            inputs:
              buildType: 'specific'
              project: '$(System.TeamProjectId)'
              definition: '$(resources.pipeline.ci.pipelineId)'
              buildVersionToDownload: 'latest'
              artifactName: 'deployment-metadata'
              targetPath: '$(Pipeline.Workspace)/metadata'
            continueOnError: true

          - task: PowerShell@2
            displayName: Load deployment metadata
            inputs:
              targetType: 'inline'
              script: |
                # Check if metadata file exists (from CI pipeline)
                $metadataPath = "$(Pipeline.Workspace)/metadata/deployment-metadata.json"

                if (Test-Path $metadataPath) {
                  Write-Host "##[section]Using metadata from CI pipeline"
                  $metadata = Get-Content $metadataPath | ConvertFrom-Json

                  Write-Host "##[section]Deployment Metadata:"
                  Write-Host "Build ID: $($metadata.buildId)"
                  Write-Host "Source Version: $($metadata.sourceVersion)"
                  Write-Host "Image Tag: $($metadata.imageTag)"
                  Write-Host "Container Registry: $($metadata.containerRegistry)"
                  Write-Host "Image Repository: $($metadata.imageRepository)"
                  Write-Host "Build Timestamp: $($metadata.timestamp)"

                  # Set variables for use in subsequent tasks
                  Write-Host "##vso[task.setvariable variable=newImageTag]$($metadata.containerRegistry)/$($metadata.imageRepository):$($metadata.imageTag)"
                  Write-Host "##vso[task.setvariable variable=buildId]$($metadata.buildId)"
                  Write-Host "##vso[task.setvariable variable=hasNewBuild]true"
                } else {
                  Write-Host "##[warning]No metadata from CI pipeline found. This is likely an infrastructure-only deployment."
                  Write-Host "##[section]Using latest container image from registry"

                  # Use latest tag for infrastructure-only deployments
                  Write-Host "##vso[task.setvariable variable=newImageTag]hireground.azurecr.io/adomcp:latest"
                  Write-Host "##vso[task.setvariable variable=buildId]infrastructure-only"
                  Write-Host "##vso[task.setvariable variable=hasNewBuild]false"
                }

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Deploy infrastructure using Bicep
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: '$(azureServiceConnection)'
              subscriptionId: '$(subscriptionId)'
              location: '$(location)'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.DefaultWorkingDirectory)/.azure/main.bicep'
              overrideParameters: >-
                -environmentName "$(environmentName)"
                -location "$(location)"
                -azureDevOpsOrgName "$(azureDevOpsOrgName)"
              deploymentMode: 'Incremental'
              deploymentOutputs: 'armOutputsJson'

          - template: yaml/ParseArmDeploymentOutputs.yaml@armtemplates
            parameters:
              deploymentOutputs: $(armOutputsJson)
              name: parseArmJsonOutput

          - task: AzureCLI@2
            displayName: Deploy container to Azure Container Apps
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                echo "##[section]Starting deployment to Azure Container Apps"
                echo "Resource Group: $(resourceGroupName)"
                echo "Container App: $(containerAppName)"
                echo "New Image: $(newImageTag)"
                echo "Has New Build: $(hasNewBuild)"

                # Check if container app exists
                if az containerapp show --name $(containerAppName) --resource-group $(resourceGroupName) --output none 2>/dev/null; then

                  # Only update container image if we have a new build
                  if [ "$(hasNewBuild)" = "true" ]; then
                    echo "##[command]Container App exists, updating with new image..."

                    # Update existing container app
                    az containerapp update \
                      --name $(containerAppName) \
                      --resource-group $(resourceGroupName) \
                      --image $(newImageTag) \
                      --output table

                    echo "##[section]Container App updated successfully!"
                  else
                    echo "##[section]Infrastructure-only deployment - Container App image not changed"
                    echo "##[command]Container App exists and infrastructure is up to date"
                  fi
                else
                  echo "##[warning]Container App $(containerAppName) not found in resource group $(resourceGroupName)"
                  echo "Please ensure the infrastructure is deployed first using 'azd up' or Bicep templates"
                  exit 1
                fi

                # Wait for deployment to complete
                echo "##[command]Waiting for deployment to complete..."
                sleep 30

                # Get the application URL
                FQDN=$(az containerapp show \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroupName) \
                  --query "properties.configuration.ingress.fqdn" \
                  --output tsv)

                if [ -n "$FQDN" ]; then
                  echo "##[section]âœ… Deployment completed successfully!"
                  echo "##[command]ðŸš€ Application URL: https://$FQDN"
                  echo "##vso[task.setvariable variable=APP_URL;isOutput=true]https://$FQDN"
                else
                  echo "##[error]Failed to retrieve application URL"
                  exit 1
                fi

          - task: AzureCLI@2
            displayName: Verify deployment health
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "##[section]Verifying deployment health..."

                # Get container app status
                STATUS=$(az containerapp show \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroupName) \
                  --query "properties.provisioningState" \
                  --output tsv)

                echo "Container App provisioning state: $STATUS"

                if [ "$STATUS" = "Succeeded" ]; then
                  echo "##[section]âœ… Container App is healthy and running!"

                  # Get replica status
                  REPLICAS=$(az containerapp replica list \
                    --name $(containerAppName) \
                    --resource-group $(resourceGroupName) \
                    --query "length(@)" \
                    --output tsv)

                  echo "Active replicas: $REPLICAS"
                else
                  echo "##[warning]Container App status: $STATUS"
                  echo "Check the Azure portal for more details"
                fi

- stage: PostDeployment
  displayName: Post-deployment tasks
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: NotifySuccess
    displayName: Deployment notification
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download deployment metadata
      inputs:
        buildType: 'specific'
        project: '$(System.TeamProjectId)'
        definition: '$(resources.pipeline.ci.pipelineId)'
        buildVersionToDownload: 'latest'
        artifactName: 'deployment-metadata'
        targetPath: '$(Pipeline.Workspace)/metadata'
      continueOnError: true

    - task: PowerShell@2
      displayName: Send deployment notification
      inputs:
        targetType: 'inline'
        script: |
          $metadataPath = "$(Pipeline.Workspace)/metadata/deployment-metadata.json"

          Write-Host "##[section]ðŸŽ‰ Azure DevOps MCP Server Deployment Summary"
          Write-Host "##[command]Environment: $(environmentName)"
          Write-Host "##[command]Resource Group: $(resourceGroupName)"

          if (Test-Path $metadataPath) {
            $metadata = Get-Content $metadataPath | ConvertFrom-Json
            Write-Host "##[command]Build ID: $($metadata.buildId)"
            Write-Host "##[command]Image Tag: $($metadata.imageTag)"
            Write-Host "##[command]Container Registry: $($metadata.containerRegistry)"
            Write-Host "##[command]Source Version: $($metadata.sourceVersion)"
            Write-Host "##[command]Build Timestamp: $($metadata.timestamp)"
          } else {
            Write-Host "##[command]Deployment Type: Infrastructure-only"
            Write-Host "##[command]Container Image: Using latest from registry"
          }
          Write-Host ""
          Write-Host "##[section]âœ… Deployment completed successfully!"
          Write-Host "##[command]The Azure DevOps MCP Server is now running in Azure Container Apps"
