# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '388d79ab-b089-4803-8d92-1422f8cb61a5'
  imageRepository: 'adomcp'
  containerRegistry: 'hireground.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Deployment variables - Update these based on your Azure environment
  azureServiceConnection: 'YOUR_AZURE_SERVICE_CONNECTION_NAME'  # Replace with your Azure service connection name
  environmentName: 'YOUR_ENVIRONMENT_NAME'  # Replace with your environment name (e.g., 'dev', 'prod')
  resourceToken: 'YOUR_RESOURCE_TOKEN'  # Replace with your resource token from the Bicep deployment

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to Azure Container Apps
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToContainerApps
    displayName: Deploy to Container Apps
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Update Container App with new image
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e

                # Calculate resource names based on your Bicep template pattern
                RESOURCE_TOKEN="$(resourceToken)"
                RESOURCE_GROUP="rg-$(environmentName)"
                CONTAINER_APP="ca-${RESOURCE_TOKEN}"
                NEW_IMAGE="$(containerRegistry)/$(imageRepository):$(tag)"

                echo "##[section]Deploying to Azure Container Apps"
                echo "Resource Group: $RESOURCE_GROUP"
                echo "Container App: $CONTAINER_APP"
                echo "New Image: $NEW_IMAGE"

                # Update the container app with the new image
                az containerapp update \
                  --name "$CONTAINER_APP" \
                  --resource-group "$RESOURCE_GROUP" \
                  --image "$NEW_IMAGE" \
                  --output table

                echo "##[section]Container App updated successfully!"

                # Get the application URL
                FQDN=$(az containerapp show \
                  --name "$CONTAINER_APP" \
                  --resource-group "$RESOURCE_GROUP" \
                  --query "properties.configuration.ingress.fqdn" \
                  --output tsv)

                if [ -n "$FQDN" ]; then
                  echo "##[section]âœ… Deployment completed!"
                  echo "##[command]ðŸš€ Application URL: https://$FQDN"
                else
                  echo "##[warning]Could not retrieve application URL"
                fi
